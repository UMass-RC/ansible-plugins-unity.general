---
####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################

# Copyright (c) Ansible Project
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later

- block:
    - name: create temporary playbook files
      tempfile:
        state: file
        suffix: temp
      loop: "{{ tests }}"
      loop_control:
        loop_var: test
        label: "{{ test.name }}"
      register: temporary_playbook_files

    - name: create temporary playbook output files
      tempfile:
        state: file
        suffix: temp
      loop: "{{ tests }}"
      loop_control:
        loop_var: test
        label: "{{ test.name }}"
      register: temporary_playbook_output_files

    - name: write playbook to file
      copy:
        content: "{{ test.playbook }}"
        dest: "{{ playbook_file }}"
      loop: "{{ tests }}"
      loop_control:
        loop_var: test
        label: "{{ test.name }}"
      vars:
        playbook_file: "
          {%- for result in temporary_playbook_files.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.path -}}
          {%-   endif -%}
          {%- endfor -%}"
      diff: false

    - name: run playbook
      shell: "{{timeout_command_prepend}} ansible-playbook -i {{ inventory }} {{ test.extra_args | default('') }} {{ playbook }} | tee {{ output_file }}"
      environment: "{{ test.environment }}"
      loop: "{{ tests }}"
      loop_control:
        loop_var: test
        label: "{{ test.name }}"
      register: playbook_runs
      failed_when: playbook_runs.failed and not (test.allow_nonzero_exit_code | default(false))
      changed_when: false
      vars:
        inventory: "{{ role_path }}/inventory.yml"
        playbook: "
          {%- for result in temporary_playbook_files.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.path -}}
          {%-   endif -%}
          {%- endfor -%}"
        output_file: "
          {%- for result in temporary_playbook_output_files.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.path -}}
          {%-   endif -%}
          {%- endfor -%}"
        timeout_command_prepend: "{{ ('timeout -s INT ' + (test.timeout | string)) if test.timeout is defined else '' }}"

    - name: assert that stderr is empty (no callback errors)
      fail:
        msg: "found non-empty stderr: '{{playbook_run.stderr}}'"
      when: (playbook_run.stderr != "") and (not (playbook_run.test.allow_non_empty_stderr | default(false)))
      loop: "{{ playbook_runs.results }}"
      loop_control:
        loop_var: playbook_run
        label: "{{ playbook_run.test.name }}"

    - name: munge playbook output with sed
      command:
        argv:
          - sed
          - -E
          - "{{ test.sed_E_command }}"
          -  -i
          - "{{ output_file }}"
      loop: "{{ tests }}"
      loop_control:
        loop_var: test
        label: "{{ test.name }}"
      when: test.sed_E_command is defined
      changed_when: false
      vars:
        output_file: "
          {%- for result in temporary_playbook_output_files.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.path -}}
          {%-   endif -%}
          {%- endfor -%}"

    - name: slurp munged playbook output
      slurp:
        src: "{{ output_file }}"
      loop: "{{ tests }}"
      loop_control:
        loop_var: test
        label: "{{ test.name }}"
      changed_when: false
      vars:
        output_file: "
          {%- for result in temporary_playbook_output_files.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.path -}}
          {%-   endif -%}
          {%- endfor -%}"
      register: munged_outputs

    - name: display expected vs actual diff (don't forget to add the `--diff` argument to `ansible-test integration`)
      unity.general.return_args:
        changed: true
        diff:
          before_header: "expected output ({{ ansible_playbook_cmd }})"
          before: "{{ test.expected_output }}"
          after_header: actual output ({{ output_file }})
          after: "{{ output }}"
      when: test.expected_output != output
      loop: "{{ tests }}"
      loop_control:
        loop_var: test
        label: "{{ test.name }}"
      vars:
        output: "
          {%- for result in munged_outputs.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.content | b64decode -}}
          {%-   endif -%}
          {%- endfor -%}"
        output_file: "
          {%- for result in temporary_playbook_output_files.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.path -}}
          {%-   endif -%}
          {%- endfor -%}"
        ansible_playbook_cmd: "
          {%- for result in playbook_runs.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.cmd -}}
          {%-   endif -%}
          {%- endfor -%}"

    - name: assert that expected output == actual output
      fail:
        msg: "the following tests did not produce the expected output: {{ failed_tests }}"
      when: failed_tests != ''
      vars:
         failed_tests: "
          {%- for result in munged_outputs.results -%}
          {%-   if result.test.expected_output != (result.content | b64decode) -%}
          {{-     result.test.name -}}{{- ', ' -}}
          {%-   endif -%}
          {%- endfor -%}"

  always:
    - name: remove temporary playbooks
      file:
        path: "{{ temporary_file.path }}"
        state: absent
      loop: "{{ temporary_playbook_files.results }}"
      loop_control:
        loop_var: temporary_file
        label: "{{ temporary_file.test.name }}: {{ temporary_file.path }}"

    - name: remove temporary playbook output files
      file:
        path: "{{ temporary_file.path }}"
        state: absent
      loop: "{{ temporary_playbook_output_files.results }}"
      loop_control:
        loop_var: temporary_file
        label: "{{ temporary_file.test.name }}: {{ temporary_file.path }}"
