---
####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################

- block:
    - name: create temporary playbook files
      tempfile:
        state: file
        suffix: temp
      loop: "{{ tests }}"
      loop_control:
        loop_var: test
        label: "{{ test.name }}"
      register: temporary_playbook_files

    - name: create temporary playbook output files
      tempfile:
        state: file
        suffix: temp
      loop: "{{ tests }}"
      loop_control:
        loop_var: test
        label: "{{ test.name }}"
      register: temporary_playbook_output_files

    - name: write playbook to file
      copy:
        content: "{{ test.playbook }}"
        dest: "{{ playbook_file }}"
      loop: "{{ tests }}"
      loop_control:
        loop_var: test
        label: "{{ test.name }}"
      vars:
        playbook_file: "
          {%- for result in temporary_playbook_files.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.path -}}
          {%-   endif -%}
          {%- endfor -%}"
      diff: false

    - name: run playbook
      shell:
        cmd: "{{ env_command }} {{ timeout_command }} ansible-playbook -i {{ inventory }} {{ extra_args }} {{ playbook }} &> {{ output_file }}"
        executable: /bin/bash
      loop: "{{ tests }}"
      loop_control:
        loop_var: test
        label: "{{ test.name }}"
      register: playbook_runs
      failed_when: playbook_runs.failed and not (test.allow_nonzero_exit_code | default(false))
      changed_when: false
      vars:
        inventory: "{{ role_path }}/inventory.yml"
        extra_args: "{{ test.extra_args | default('') }}"
        playbook: "
          {%- for result in temporary_playbook_files.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.path -}}
          {%-   endif -%}
          {%- endfor -%}"
        output_file: "
          {%- for result in temporary_playbook_output_files.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.path -}}
          {%-   endif -%}
          {%- endfor -%}"
        timeout_command: "{{ '' if test.timeout is not defined else ('timeout -s INT ' + (test.timeout | string)) }}"
        # env command is used rather than the environment parameter so that user can copy paste command and reproduce results
        env_keys: "{{ (test.environment | default({})) | dict2items | map(attribute='key') }}"
        env_values: "{{ (test.environment | default({})) | dict2items | map(attribute='value') }}"
        env_key_value_pairs: "{{ env_keys | zip(env_values) }}"
        env_command: "env {{ env_key_value_pairs | map('join', '=') | map('quote') | join(' ') }}"

    - name: munge playbook output with sed
      command:
        argv:
          - sed
          - -E
          - "{{ test.sed_E_command }}"
          -  -i
          - "{{ output_file }}"
      loop: "{{ tests }}"
      loop_control:
        loop_var: test
        label: "{{ test.name }}"
      when: test.sed_E_command is defined
      changed_when: false
      vars:
        output_file: "
          {%- for result in temporary_playbook_output_files.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.path -}}
          {%-   endif -%}
          {%- endfor -%}"

    - name: slurp munged playbook output
      slurp:
        src: "{{ output_file }}"
      loop: "{{ tests }}"
      loop_control:
        loop_var: test
        label: "{{ test.name }}"
      changed_when: false
      vars:
        output_file: "
          {%- for result in temporary_playbook_output_files.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.path -}}
          {%-   endif -%}
          {%- endfor -%}"
      register: munged_outputs

    - name: display expected vs actual diff (don't forget to add the `--diff` argument to `ansible-test integration`)
      unity.general.return_args:
        changed: true
        diff:
          before_header: "expected output"
          before: "{{ test.expected_output }}"
          after_header: actual output ({{ ansible_playbook_cmd }})
          after: "{{ output }}"
      when: test.expected_output != output
      loop: "{{ tests }}"
      loop_control:
        loop_var: test
        label: "{{ test.name }}"
      vars:
        output: "
          {%- for result in munged_outputs.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.content | b64decode -}}
          {%-   endif -%}
          {%- endfor -%}"
        output_file: "
          {%- for result in temporary_playbook_output_files.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.path -}}
          {%-   endif -%}
          {%- endfor -%}"
        ansible_playbook_cmd: "
          {%- for result in playbook_runs.results -%}
          {%-   if result.test.name == test.name -%}
          {{-     result.cmd -}}
          {%-   endif -%}
          {%- endfor -%}"

    - name: assert that expected output == actual output
      fail:
        msg: "the following tests did not produce the expected output: {{ failed_tests }}"
      when: failed_tests != ''
      vars:
         failed_tests: "
          {%- for result in munged_outputs.results -%}
          {%-   if result.test.expected_output != (result.content | b64decode) -%}
          {{-     result.test.name -}}{{- ', ' -}}
          {%-   endif -%}
          {%- endfor -%}"

  always:
    - name: remove temporary playbooks
      file:
        path: "{{ temporary_file.path }}"
        state: absent
      loop: "{{ temporary_playbook_files.results }}"
      loop_control:
        loop_var: temporary_file
        label: "{{ temporary_file.test.name }}: {{ temporary_file.path }}"
      diff: false

    - name: remove temporary playbook output files
      file:
        path: "{{ temporary_file.path }}"
        state: absent
      loop: "{{ temporary_playbook_output_files.results }}"
      loop_control:
        loop_var: temporary_file
        label: "{{ temporary_file.test.name }}: {{ temporary_file.path }}"
      diff: false
